* =column-grep=

=column-grep= is a small command-line tool for chopping up CSVs - performing a
common =awk= task, but more efficiently.

** Installation

 1. Ensure Haskell Stack is [[https://docs.haskellstack.org/en/stable/install_and_upgrade/][installed]].

 2. Clone the repository with
    #+begin_src shell
    git clone https://github.com/qualiaa/column-grep
    #+end_src

 3. Enter the repository root with ~cd column-grep~

 4. Run inplace with ~stack run column-grep~ or install for your user with  or ~stack install~

** Usage

This section provides a full usage description - to get started quickly, you
might prefer the long list of [[Examples]].

=column-grep= takes a description of which rows and columns to print, and then
filters its input accordingly. The description is provided as arguments, the
input is provided over =stdin= and the output is printed to =stdout=. Input is
assumed to be a valid CSV file with column headers on the first line. 
The filter descriptions are built up of /output/\zwnj{}s and /comparator/\zwnj{}s:
#+begin_src shell
  column-grep [output-spec|comparator] ... < input.csv > output.csv
#+end_src

An /output-spec/ specifies one or more columns to print in the output. A /comparator/
specifies a matching rule for each row, based on the value of specific cells. If
no /output-spec/\zwnj{}s are specified, then all columns are printed; if no
/comparator/\zwnj{}s are specified, all rows are printed. Comparators are
disjunctive, so a row which matches any comparator will be printed.

An /output-spec/ is a /column-spec/. A /column-spec/ is either a /name/, an /index/,
or a /range/ of indices.

A /comparator/ is one or more comma-delimited /column-spec/\zwnj{}s, followed by an ~=~
and a single /name/. Put another way, ~column-spec[,column-spec ...]=name~. For
example, =/Age$/=300= will match all columns whose name ends in =Age=, and match
all rows where any of these columns' values equals =300=.

A /name/ is a PCRE regex, surrounded in =/=\zwnj{}s, such as =/a.*c?e+$/=, or a raw string
such as =Age=. Regex matching occurs throughout the string, so the =^$= anchors
are important for efficient matching. A raw string =Age= is equivalent to
=/^Age$/=.

An /index/ is an integer. Columns are indexed from =1=. Negative indices are
permitted, where =-1= refers to the last column, =-2= the second-to-last, /&c./

A /range/ is specified as =[index]:[index]=, where indices are inclusive. If
either index is not specified, such as in =5:=, =:-2= or =:=, it takes the whole
remaining range (so =:= matches every column).

** Examples

The following examples spawn a process listening on =stdin= and producing output
on =stdout=. If you want to do input/output with files, add redirections, like:
#+begin_src shell
  column-grep ... < input.csv > output.csv
#+end_src
Some examples contain this where it may be non-obvious where it belongs.

The examples are split into column filtering and row filtering. These can be
combined to perform both kinds of filtering in one command; only the filtered
columns are printed from the results of row filtering.

*** Column filtering with output-specs

To print the first and fifth columns (equivalent to ~cut -d, -f1,5~):
#+begin_src shell
  column-grep 1 5
#+end_src

To print the first and fifth columns and all columns in between (equivalent to ~cut -d, -f1-5~): :
#+begin_src shell
  column-grep  1:5
#+end_src

To print the first column and second to last column:
#+begin_src shell
  column-grep 1 -2
#+end_src

To print the first column, second to last column, and all columns in between:
#+begin_src shell
  column-grep 1:-2
#+end_src

To print every column whose name is "Age":
#+begin_src shell
  column-grep Age
#+end_src

To print every column whose name ends with "Age":
#+begin_src shell
  column-grep '/ Age$/'
#+end_src

To print the first column, as well as every column whose name is "First Name" or
starts with "type-":
#+begin_src shell
  column-grep 1 "First Name" /^type-/
#+end_src

To print every column (equivalent to ~cat~):
#+begin_src shell
  column-grep :
#+end_src

*** Row filtering with comparators

To print every row whose "First Name" cell is "Jamie":

#+begin_src shell
  column-grep "First Name"=Jamie
#+end_src

To print every row containing a cell which is either empty or "NA":

#+begin_src shell
  column-grep :='/^(NA|)$/'
#+end_src

To print every row where the value of any column ending with "Severity" is set
to high, and also check the first column and last two columns from the end:
#+begin_src shell
  column-grep 1,'/ Severity$/',-2:=HIGH
#+end_src

**** Conjunctive and disjunctive comparators

Comparators are disjunctive. To print every row whose "First Name" cell is
"Jamie" /or/ "Age" is "30":
#+begin_src shell
  column-grep "First Name"=Jamie Age=30
#+end_src

In order to print every row whose "First Name" cell is "Jamie" /and/ "Age" is
"30" (conjunctive) we can invoke two =column-grep= instances:
#+begin_src shell
  column-grep "First Name"=Jamie < input.csv | column-grep Age=30  > output.csv
#+end_src
